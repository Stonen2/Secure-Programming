from scapy.layers.inet import IP, TCP, ICMP
from scapy.sendrecv import sr1
import random 
import sys


fsopen =[] 
openports = [] 
allports = [] 
nmapports = [] 

#THis takes in a port number that is open and takes in the Nmap data that corresponds to the port number in question and 
#Prints this to a output file to give further insight to the ports that are open 

def printfile(port, test): 
  f = open("HalfScan.txt", "a")
  f.write("There is an open port and the port number is " + port + "T his is what Nmap Says about the Port" + str(test)+ "\n")


#This scan uses the sr1 from Scapy to then send a syn packet to a given address at a specific port that are given to us by the user innput 
#THat is also randomly generated by the function random. This then put the packet into an array and then we parse out the Flag of the 
#packet that is returned. If the flag returns SA then we know that the port is open and we can pull information on this. 
#If not the port is Closed 
def halfscan(ipaddress, bp):
    fsopen.append( sr1(IP(dst=ipaddress)/TCP(dport=bp,flags="S")))
    unans = fsopen[0]
    fsopen.remove(unans)
    flag = unans.sprintf("%TCP.flags%")
    #print(fsopen)
    #print(bp)
    #print(flag)
    if(flag == "SA"):
        openports.append(bp)
        print("Port was open")
        test = comparenmap(bp)
        printfile(str(bp), test )


    return fsopen


#THis creates a random number between the beginning port number and the ending port numnber 
#THis then checks that the number that has been generated is in the list of ports that need to be 
#SCanned. If it does not exist then we regenerare a new number and then compare it. Once the number is being prepared we remove this
#From the ports needed to be scanned and return the port we are about to scan. 
def randport(bp, ep):
    a = random.randint(int(bp),int(ep))
    flag = False
    while(flag == False):
        if a not in allports: 
            a = random.randint(int(bp),int(ep))
            flag = False
        else: 
            allports.remove(a)
            print(a)
            return a


#This function takes in a port number and then searches the list that holds all of the Nmap Port data 
#Once the port is checked in the Nmap the function will then return all of the data that Nmap has on a given port
#That will then be printed to an output file 
def comparenmap(port): 
    #print("Compare Nmap Gets called")
    count = 0 
    for i in nmapports: 
            #print(g)
            #print(i[1])
            if str(port) in i: 
                return(nmapports[count])
                #print(x)
               # print(a)
                #return a
            count = count + 1
        
    

#This function reads in the Nmap file and will pull all of the nmap data into a list to be traversed later on 
#We will then read this data later on when we find an open port and want to find nmap data
def grabTheFile():
    with open("/usr/share/nmap/nmap-services","r") as g:
        text = g.readlines()
        
        for line in text:
            nmapports.append(line)


#The main function will read in the Nmap file and put the Nmap data into an array to be used later on. 
#Then we read in both the beginning port and ending port nunmber. After this we then calculate all of 
#THe port numbers taht are within the range and place this into an array to then calculate random 
#ports to test based on the nunmber of port numbers that still need to be scanned. Then we 
#Read in and test every port in the list until the allport array list is empty. 
def main(ipad, begp, endp): 
    grabTheFile()
    #print(nmapports)
    i = int(begp) 
    count = int(begp)
    k = int(endp)

    while(count <= k):
        allports.append(count)
        count = count + 1

    while(len(allports) > 1 ):
        #Call Function
        port = randport(begp, endp)
        test = halfscan(ipad,port)
        print("\n")
      
    
    print("----------------------------------------------------------------------------")
    print("\n")
    print("SCAN FINISHED")
    
  





ip = sys.argv[1]
begp = sys.argv[2]
endp = sys.argv[3]
#print(ip, begp, endp)
main(ip,begp,endp)


#main("192.168.163.1",49664,49670 )
